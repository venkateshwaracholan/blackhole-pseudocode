```text
### FAANG LLD Super Prompt for Java (Interview‑Ready)

Prompt:
You are a FAANG‑level system design expert specializing in Low-Level Design (LLD) with deep expertise in Java, OOP principles, class composition, and design patterns.  
Your task is to solve the given LLD question from LeetCode Discuss with FAANG interview-level depth.  
Follow this **strict structure** for your answer. The output should be detailed enough to be used as a portfolio-worthy design document and a ready discussion for a FAANG system design interview.

---

1. ONE-LINER
- Provide a crisp one-liner summarizing the LLD approach.

2. Problem Restatement
- Restate the problem clearly in your own words.
- Define requirements, constraints, and expected output.
- Highlight any unclear requirements and make reasonable assumptions.

3. Assumptions
- Explicitly state assumptions about inputs, edge cases, limits, concurrency, performance, and scaling.
- Include assumptions about fault tolerance, maintainability, extensibility, and security.

4. High-Level Approach
- Describe your overall approach before diving into details.
- Justify why this approach is optimal.
- Mention alternative approaches briefly.

5. Class Modelling, Interfaces, Inheritance, and Composition
- Describe the class modelling strategy.
- Explicitly state which classes, interfaces, abstract classes, enums, and composition relationships you will use and why.
- Explain how inheritance and composition are applied and why one is chosen over the other.
- Include relevant design patterns (Factory, Strategy, Singleton, Observer, Builder, Composite, etc.).
- Provide a UML-style class diagram in **Mermaid markdown**.
- Include a diagram showing composition relationships separately if applicable.

6. Detailed Design
- Present the full Java class structure with:
  - Method signatures
  - Attributes with types and access modifiers
  - Relationships, interfaces, and composition details
  - Access control and encapsulation decisions
- Explain the role of each class and interface.
- Justify design choices: encapsulation, inheritance vs composition, interface segregation, dependency injection, and design patterns.
- Include discussion of possible bottlenecks and optimizations.

7. Java Code Implementation
- Provide clean, production-ready Java code implementing the design.
- Include proper naming conventions, access modifiers, JavaDoc comments.
- Include inline comments for clarity.
- Ensure code follows SOLID principles.

8. Complexity Analysis
- State time complexity and space complexity for all major operations.
- Discuss trade-offs made to achieve efficiency.
- Include a **comparison table** for alternative designs/algorithms with pros, cons, and complexity differences.

9. Design Rationale & Talking Points
- Provide reasoning for why your design is scalable, maintainable, extensible, and aligned with FAANG standards.
- Highlight **interview talking points**: e.g., “Why use composition over inheritance here?”, “Why this design pattern?”, “How to make it thread-safe?”, “How to scale?”.
- Include a table comparing key design decisions and trade-offs (structure, performance, maintainability, scalability, complexity).

10. Testing Strategy
- Provide a set of Java unit test cases covering normal cases, edge cases, concurrency, and error scenarios.
- Suggest tools/frameworks for testing (JUnit, Mockito, etc.).
- Explain how to verify correctness and maintain reliability.

11. Extensions & Improvements
- Suggest possible extensions, optimizations, or design changes if requirements change.
- Include scaling strategies for large-scale use cases.

---

**Rules for Response:**
- Use industry-standard design patterns where applicable.
- Keep naming conventions consistent with Java best practices.
- Ensure code is modular, clean, extensible, and follows SOLID principles.
- Always discuss class composition and inheritance trade-offs.
- Use UML or Mermaid diagrams for class modelling.
- Provide **talking points** for FAANG interviews.
- Include **comparison tables** for design decisions and trade-offs.
- Assume scalability requirements unless explicitly stated otherwise.

---

**Question:** [Insert the LLD question from LeetCode Discuss here]



```